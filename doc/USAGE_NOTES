Hopefully you've had a quick peak at the TUTORIAL, given it a try, and it
worked for you.

I had been playing with Qemu and wanted a quick and easy way to create "disks"
for myself to run under virtualization. I wanted quick turn-around times so I
could try a tweak, quickly build a new disk, and test.

I wanted to create a script that would be flexible for my needs, and for
general use. In a sense the script is its own form of documentation, it
records the things I learned while working through the process of making it
work.

Like any piece of software, this script is built on assumptions. But hopefully
these assumptions aren't too restrictive.

The script allows you to define a disk size and setup, within this one file, a
set of partitions. It allows you to format the partitions any which way you
want, and define one of more blobs of data with which to fill these partitions.
Specifying partitions is optional; if not defined one partition is assumed.
Specifying how to format a partition is optional; "mke2fs" is assumed, or you
can specify what command should be assumed. The data with which to fill the
partitions can be in the form of a directory (in which case the partition will
be filled with any data, recursively, from that directory), a file (in which
case the partition will contain the specified file), or a loopback mountable
filesystem (whose contents will be transfered to the specified partition).


--partitions

For the --partitions option, specify the partitions you want by listing a set
of numbers as one argument (i.e. space-separated, enclosed in double quotes).
These numbers indicate the relative percentages of the sizes of the partitions
you want created. Note, however, if you specify 8 numbers, 9 partitions will
be created the last of which will contain any leftover percentage of the
unallocated disk space. Therefore the numbers you provide are not allowed to
sum to (or greater than) 100. If you don't specify a --partitions parameter,
one partition comprising the entire disk will be created.

For the --partitions option there is an assumption partitions will be filled
starting with the primary partitions. If only 4 partitions are specified (i.e.
3 numbers given as the argument), then partitions 1-4 will be created as
primary. If, however, more than 4 partitions are specified, partitions 1-3
will be defined as primary partitions, partition 4 will be created as an
extended partition comprising the remainder of the disk, then all subsequent
partitions will be logical partitions carved out of the remaining extended
block.


--format

The required argument to the --format option is one string (i.e. enclosed in
double quotes) comprising a comma-separated list of how each partition is to
be formatted. You can skip partitions by simply putting commas with no format
instruction, or you can end the string early. In either case the default
format strategy is "mke2fs" (which can be over-ridden using the
'--default-format' cmdline option).

If you have defined a partitioning scheme that requires the creation of an
extended partition, you must take this extended partition into account when
specifying the argument to the --format option. In other words, if an extended
partition will be defined, its corresponding format should be blank (i.e. just
specify a comma). Otherwise the formatting of your partitions after the
extended partition will be "off by one".


(data)

The required cmdline argument specifying the data to be use for each partition
must also be enclosed in double-quotes and, as with '--format', be
comma-separated (in the off-chance a directory path contains a space). Also,
similarly to '--format', provision must be made for the extended partition
number 4 if more than 4 partitions (i.e. more than 3 arguments to the
'--partitions' cmdline argument) are specified. This is usually accomplished
by adding an extra comma in the list at the 4th position.
