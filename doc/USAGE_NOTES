Hopefully you've had a quick peak at the TUTORIAL, given it a try, and it
worked for you.

I had been playing with Qemu and wanted a quick and easy way to create "disks"
for myself to run under virtualization. I wanted quick turn-around times so I
could try a tweak, quickly build a new disk, and test.

I wanted to create a script that would be flexible for my needs, and for
general use. In a sense the script is its own form of documentation, it
records the things I learned while working through the process of making it
work.

Like any piece of software, this script is built on assumptions. But hopefully
these assumptions aren't too restrictive.

The script allows you to define a disk size in which you can then assemble,
within this one file, a set of partitions. It allows you to format the
partitions any which way you want, and define one or more blobs of data
with which to fill these partitions. Specifying partitions is optional;
if not defined one partition is assumed. Specifying how to format a
partition is optional; "mke2fs" is assumed, or you can specify what command
should be assumed. Specifying the partition IDs for each partition is
optional, if not specified "83 Linux" is assumed.

The data with which to fill the partitions can be in the form of a directory
(in which case the partition will be filled with any data, recursively, from
that directory), a file (in which case the partition will contain the
specified file), any compressed image format 'tar -a' can uncompress (i.e.
tar, bz2, gzip, or xz) or a loopback mountable filesystem (whose contents
will be transfered to the specified partition).


--partitions

For the --partitions option, specify the partitions you want by listing a set
of numbers as one argument (i.e. space-separated, enclosed in double quotes).
These numbers indicate the relative percentages of the sizes of the partitions
you want created. Note, however, if you specify 8 numbers, 9 partitions will
be created the last of which will contain any leftover percentage of the
unallocated disk space. Therefore the numbers you provide are not allowed to
sum to (or greater than) 100. If you don't specify a --partitions parameter,
one partition comprising the entire disk will be created.

For the --partitions option there is an assumption partitions will be filled
starting with the primary partitions. If only 4 partitions are specified (i.e.
3 numbers given as the argument), then partitions 1-4 will be created as
primary. If, however, more than 4 partitions are specified, partitions 1-3
will be defined as primary partitions, partition 4 will be created as an
extended partition comprising the remainder of the disk, then all subsequent
partitions will be logical partitions carved out of the remaining extended
block.


--format

The required argument to the --format option is one string (i.e. enclosed in
double quotes) comprising a comma-separated list of how each partition is to
be formatted. You can skip partitions by simply putting commas with no format
instruction, or you can end the string early. In either case the default
format strategy is "mke2fs" (which can be over-ridden using the
'--default-format' cmdline option).

If you have defined a partitioning scheme that requires the creation of an
extended partition, you must take this extended partition into account when
specifying the argument to the --format option. In other words, if an extended
partition will be defined, its corresponding format should be blank (i.e. just
specify a comma). Otherwise the formatting of your partitions after the
extended partition will be "off by one".


--ids

Each partition is created with an associated partition ID. Note: this is not
to be confused with a partition's formatting. A partition can be created
with an ID of 0x0c (W95 FAT32 (LBA)) but be formatted for ext2. By default
'sfdisk' will create partitions of type 83 (Linux). You can give the script
an optional list of format IDs which it will use to set the format ID of
each partition. This must be provided as a comma-separated list, any
partitions which don't have an associated ID specified will be set to 83
by default.

Here is the current list of known IDs:

	0  Empty
	1  FAT12
	2  XENIX root
	3  XENIX usr
	4  FAT16 <32M
	5  Extended
	6  FAT16
	7  HPFS/NTFS/exFAT
	8  AIX
	9  AIX bootable
	a  OS/2 Boot Manager
	b  W95 FAT32
	c  W95 FAT32 (LBA)
	e  W95 FAT16 (LBA)
	f  W95 Ext'd (LBA)
	10 OPUS
	11 Hidden FAT12
	12 Compaq diagnostics
	14 Hidden FAT16 <32M
	16 Hidden FAT16
	17 Hidden HPFS/NTFS
	18 AST SmartSleep
	1b Hidden W95 FAT32
	1c Hidden W95 FAT32 (LBA)
	1e Hidden W95 FAT16 (LBA)
	24 NEC DOS
	27 Hidden NTFS WinRE
	39 Plan 9
	3c PartitionMagic recovery
	40 Venix 80286
	41 PPC PReP Boot
	42 SFS
	4d QNX4.x
	4e QNX4.x 2nd part
	4f QNX4.x 3rd part
	50 OnTrack DM
	51 OnTrack DM6 Aux1
	52 CP/M
	53 OnTrack DM6 Aux3
	54 OnTrackDM6
	55 EZ-Drive
	56 Golden Bow
	5c Priam Edisk
	61 SpeedStor
	63 GNU HURD or SysV
	64 Novell Netware 286
	65 Novell Netware 386
	70 DiskSecure Multi-Boot
	75 PC/IX
	80 Old Minix
	81 Minix / old Linux
	82 Linux swap / Solaris
	83 Linux
	84 OS/2 hidden C: drive
	85 Linux extended
	86 NTFS volume set
	87 NTFS volume set
	88 Linux plaintext
	8e Linux LVM
	93 Amoeba
	94 Amoeba BBT
	9f BSD/OS
	a0 IBM Thinkpad hibernation
	a5 FreeBSD
	a6 OpenBSD
	a7 NeXTSTEP
	a8 Darwin UFS
	a9 NetBSD
	ab Darwin boot
	af HFS / HFS+
	b7 BSDI fs
	b8 BSDI swap
	bb Boot Wizard hidden
	be Solaris boot
	bf Solaris
	c1 DRDOS/sec (FAT-12)
	c4 DRDOS/sec (FAT-16 < 32M)
	c6 DRDOS/sec (FAT-16)
	c7 Syrinx
	da Non-FS data
	db CP/M / CTOS / ...
	de Dell Utility
	df BootIt
	e1 DOS access
	e3 DOS R/O
	e4 SpeedStor
	eb BeOS fs
	ee GPT
	ef EFI (FAT-12/16/32)
	f0 Linux/PA-RISC boot
	f1 SpeedStor
	f4 SpeedStor
	f2 DOS secondary
	fb VMware VMFS
	fc VMware VMKCORE
	fd Linux raid autodetect
	fe LANstep
	ff BBT


(data)

The required cmdline argument specifying the data to be use for each partition
must also be enclosed in double-quotes and, as with '--format', be
comma-separated (in the off-chance a directory path contains a space). Also,
similarly to '--format', provision must be made for the extended partition
number 4 if more than 4 partitions (i.e. more than 3 arguments to the
'--partitions' cmdline argument) are specified. This is usually accomplished
by adding an extra comma in the list at the 4th position.
